/**
 * Transform `tree` to nlcst.
 *
 * @param {HastNode} tree
 * @param {VFile} file
 * @param {ParserInstance|ParserConstructor} Parser
 * @returns {NlcstRoot}
 */
export function toNlcst(
  tree: HastNode,
  file: VFile,
  Parser: ParserInstance | ParserConstructor
): NlcstRoot
export type Point = import('unist').Point
export type NlcstRoot = import('nlcst').Root
export type NlcstParagraph = import('nlcst').Paragraph
export type NlcstWhiteSpace = import('nlcst').WhiteSpace
export type NlcstSource = import('nlcst').Source
export type NlcstContent = import('nlcst').Content
export type NlcstSentenceContent = import('nlcst').SentenceContent
export type NlcstNode = NlcstRoot | NlcstContent
export type HastRoot = import('hast').Root
export type HastElement = import('hast').Element
export type HastContent = import('hast').Content
export type HastElementContent = import('hast').ElementContent
export type HastNode = HastRoot | HastContent
export type HastParent = Extract<HastNode, import('unist').Parent>
export type VFile = import('vfile').VFile
export type ParserInstance = {
  parse(nodes: NlcstContent[]): NlcstRoot
  tokenizeSource(value: string): NlcstSource
  tokenizeWhiteSpace(value: string): NlcstWhiteSpace
  tokenizeParagraph(nodes: NlcstSentenceContent[]): NlcstParagraph
  tokenize(value: string): NlcstSentenceContent[]
}
export type ParserConstructor = new () => ParserInstance
